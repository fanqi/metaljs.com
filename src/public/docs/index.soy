{namespace docsIndex}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>准备开始</h1>
		<p>
			有很多不同的方法使用 Metal.js 来构建组件。您可以使用内置集成的 <a href="http://developers.google.com/closure/templates/">soy</a> 或者 <a href="https://facebook.github.io/jsx/">JSX</a> 模板，
			甚至在 Metal.js 的基础上构建您自己的模板抽象层来代替。
			您可以使用 <strong>babel</strong>、<strong>traceur</strong> 或者任何其他的编译器构建 ES6 代码。
			您也可以使用 <strong>karma</strong>、<strong>jasmine</strong> 或者任何其他的测试框架进行测试，并且可以为您的项目使用任何目录结构。
			总而言之，您可以根据自己的需要定制一切，整个世界由你做主。
		</p>
		<p>
			本指南将重点介绍快速和简单地使用 Metal.js 的方法。
			但是如果您很兴奋地想尽快尝试一下，您可以玩玩这个 <a href="https://jsfiddle.net/metaljs/y1tqa7vz/" target="_blank">JSFiddle</a>。
		</p>

		<h2 id="boilerplate">样板文件</h2>

		<p>
			您可以用任何您想要的方式组织您的 <strong>Metal.js</strong> 项目，
			但是刚开始我们推荐使用由我们创造的 <a href="/docs/yeoman-generator.html">Yeoman 生成器</a>，
			它已经为您准备了项目结构以及基本的开发工作流。
		</p>

		<p>
			如果您愿意的话您就可以使用它，但是为了使事情更简单，我们提供了为本教程创建的样本文件的压缩包，您可以在这里下载：
		</p>

		<div class="docs-download-buttons">
			<a
				href="/downloads/boilerplate.zip"
				class="btn btn-size-medium btn-effect-primary">
				Soy 样板文件
			</a>
			<a
				href="/downloads/boilerplate-jsx.zip"
				class="btn btn-size-medium btn-effect-primary">
				JSX 样板文件
			</a>
		</div>

		<p>
			请注意，您下载的这个压缩包不仅包含起始样板文件，还包含本教程指南中每个步骤的文件夹，以便您可以随我们一起编码，或者检出每个步骤的最终代码。
		</p>

		<p>
			现在您有了样板文件,您只需要：
		</p>

		<ol>
			<li>
				<p>
					安装 <a href="https://nodejs.org">NPM</a> v3.0.0 或者更新的（如果您还没有）
				</p>
			</li>
			<li>
				<p>
					<strong>只针对 soy 用户</strong>:
					安装 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html">Java</a> version
					8 或者更新的（如果您还没有）
				</p>
			</li>
			<li>
				<p>
					在终端中输入 <strong>1. Hello World</strong> 文件夹，并且安装 npm 依赖，通过键入：<code>[sudo] npm i</code>
				</p>
			</li>
		</ol>

		<p>
			一旦依赖安装结束，您将得到一个类似的目录树：
		</p>

		<textarea class="code" data-mode="javascript">{literal}├── demos
│   └── index.html
├── node_modules
├── package.json
├── src
│   ├── Modal.js
│   ├── Modal.soy // Only if Soy was chosen
│   └── modal.scss
└── test
    └── Modal.js{/literal}</textarea>

		<h2>构建</h2>

		<p>
			如果打开生成的 <strong>src/Modal.js</strong> 文件，您可能会注意到它使用的是 <a href="https://babeljs.io/docs/learn-es2015/"> ES6</a> 语法：
		</p>

		<textarea class="code" data-mode="javascript">{literal}class Modal extends ...{/literal}
		</textarea>

		<p>
			这意味着它需要经历一个构建过程，因为浏览器还没有完全实现所有的 ES6 特性。
		</p>
		<p>
			<strong>generator-metal</strong> 已经准备一些可用的脚本，包括构建脚本。
			默认情况下，这个脚本将构建一切到全局变量中。要使用它，只需键入：<code>npm run build</code>。
    </p>

		<h2>演示页面</h2>

		<p>
			现在已经构建了代码，只需要在浏览器中打开 <strong>demos/index.html</strong> 文件。
			应该就会显示一个 <strong>Hello World</strong> 信息，像这样：
			<br><br>
			<img src="../images/docs/hello_world.png" width="100">
		</p>

		<p>
			如果您查看 <strong>demos/index.html</strong> 的内容， 您将理解这个组件是怎样被渲染的。
			在这个例子中，它是通过调用 <code>new metal.Modal();</code> 直接实例化的。
		</p>

		<p>
			默认情况下，这个组件将被附加到 document 的 body 中，当然您也可以指定组件渲染的位置。
			查看 <a href="/docs/rendering-components.html">渲染组件</a> 来找出如何做吧。
		</p>

		<h2>Hello World</h2>

		<p>
			正如您所见，生成的项目自动为您呈现 <strong>Hello World</strong>。好奇的想看看这是怎么做的？这很简单，只需要看看生成的模板:
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">{literal}&lbrace;namespace Modal&rbrace;

/**
 * This renders the component's whole content.
 * Note: has to be called ".render".
 */
&lbrace;template .render&rbrace;
  &lt;div&gt;Hello World&lt;/div&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">{literal}import JSXComponent from 'metal-jsx';

class Modal extends JSXComponent {
	render() &lbrace;
		return &lt;div&gt;Hello World&lt;/div&gt;;
	}
}

export default Modal;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			您可以替换默认的内容来改变组件的呈现，只需确保在更改之后再次构建代码。
		</p>

		<h2>下一步</h2>

		<p>
			现在您已经成功运行了一个简单的 <strong>Hello World</strong> 组件，让我们把它变成 <strong>Modal</strong> 吧。
		</p>

		<p><strong><a href="/docs/modal.html">↪ 教程: 模态框</a></strong></p>
	{/param}
{/call}
{/template}
