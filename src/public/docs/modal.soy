{namespace docsModal}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>教程：模态框</h1>

		<p>
			在 <a href="/docs/">上一章</a> 中，我们学习了怎样使用 Metal.js 构建一个简单的项目，
			屏幕上呈现 <strong>Hello World</strong> 。这一章里让我们在其基础上改进下，呈现一个模态对话框吧。
		</p>

		<h2>渲染</h2>

		<p>
			我们生成的项目已经包含了 <a href="http://getbootstrap.com/">bootstrap css</a>，
			因此我们可以在模态框中使用它的标记。更新组件模板如下：
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">{literal}&lbrace;namespace Modal&rbrace;

/**
 * This renders the component's whole content.
 * Note: has to be called ".render".
 * @param body
 * @param header
 */
&lbrace;template .render&rbrace;
	&lt;div class="modal show"&gt;
		&lt;div class="modal-dialog"&gt;
			&lt;div class="modal-content"&gt;
				&lt;header class="modal-header"&gt;
					&lt;button type="button" class="close"&gt;
						&lt;span&gt;×&lt;/span&gt;
					&lt;/button&gt;
					&lt;h4&gt;{$header}&lt;/h4&gt;
				&lt;/header&gt;
				&lt;section class="modal-body"&gt;
					{$body}
				&lt;/section&gt;
				&lt;footer class="modal-footer"&gt;
					&lt;button type="button" class="btn btn-primary"&gt;OK&lt;/button&gt;
				&lt;/footer&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">{literal}import JSXComponent from 'metal-jsx';

class Modal extends JSXComponent {
	/**
	 * Renders the component's content. Note that data can be accessed via the
	 * `config` property.
	 */
	render() &lbrace;
		return &lt;div class="modal show"&gt;
			&lt;div class="modal-dialog"&gt;
				&lt;div class="modal-content"&gt;
					&lt;header class="modal-header"&gt;
						&lt;button type="button" class="close"&gt;
							&lt;span&gt;×&lt;/span&gt;
						&lt;/button&gt;
						&lt;h4&gt;{this.config.header}&lt;/h4&gt;
					&lt;/header&gt;
					&lt;section class="modal-body"&gt;
						{this.config.body}
					&lt;/section&gt;
					&lt;footer class="modal-footer"&gt;
						&lt;button type="button" class="btn btn-primary"&gt;OK&lt;/button&gt;
					&lt;/footer&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;;
	}
}

export default Modal;{/literal}
				</textarea>
			{/param}
		{/call}

		<h2 id="data">传递数据</h2>

		<p>
			模板是访问数据来确定模态框的 <strong>头部</strong> 和 <strong>主体</strong> 内容。
			然而组件怎样才能接收数据呢？
		</p>

		<p>
			一个方式是通过组件的的构造函数。当直接创建组件实例时，可以把数据对象作为第一个参数传递给它们。
			所以我们更新一下 demo 来传递一些数据：
		</p>

		<textarea class="code" data-mode="javascript">{literal}new metal.Modal({
	header: 'My Modal',
	body: 'Built using Metal.js'
});{/literal}
		</textarea>

		<h2>运行 demo</h2>

		<p>
			通过 <code>npm run build</code> 编译代码，并且在浏览器中打开 demo，应该可以看到这样：
		</p>
		<img src="../images/docs/modal.png" width="100%">

		<h2>接下来的步骤</h2>

		<p>
			我们已经处理了渲染，但是您会注意到点击 <strong>x</strong> 按钮并不会做任何事情。让我们做这项工作吧。
		</p>

		<p><strong><a href="/docs/modal_events.html">↪ 教程：模态框 - 事件</a></strong></p>
	{/param}
{/call}
{/template}
