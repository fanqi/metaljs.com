{namespace docsState}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>状态</h1>

		<p>
			<strong>State</strong> 类为其他类提供了定义状态属性的扩展方式，也可以监控这些属性值的变化。
		</p>

		<p>
			<strong>Component</strong> 类默认扩展自<strong>State</strong>，而且当有改变时会自动重新渲染。
		</p>

		<p>
			如果您的类不需要渲染任何东西，最好直接从 <strong>State</strong> 扩展。这样您就可以访问它的功能，而不需要继承不需要的逻辑。
		</p>

		<h2>配置状态</h2>

		<p>
			下面的例子是一个直接扩展自 <strong>State</strong> 的类，并且在其自身定义了一个名为 <code>number</code> 的属性：
		</p>

		<textarea class="code" data-mode="javascript">{literal}
import core from 'metal';
import State from 'metal-state';

class Calculator extends State {
  /**
   * Coverts string numbers to the number type.
   */
  setNumber(val) {
    if (core.isString(val)) {
      val = parseInt(val, 10);
    }
    return val;
  }
}

Calculator.STATE = {
  number: {
    // Called whenever a new value is set. Useful when normalizing your
    // state data.
    setter: 'setNumber',

    // Accepts either number or string types. If the validator check fails,
    // the new value is discarded, and the current value kept.
    validator: val => core.isNumber(val) || core.isString(val),

    // Initial value
    value: 0
  }
}{/literal}</textarea>

		<p>
			如果您熟悉 <a href="http://yuilibrary.com/">YUI</a>，您可能认识这个特性，并且注意到它和属性怎样被定义很相似。
			基本上你只需要列出你在 <strong>STATE</strong> 静态变量上用到的属性（在YUI中将是 <strong>ATTRS</strong>），并提供它们的配置选项，如初始值和验证器。
			所有有效的属性清单，请查看 <strong>STATE</strong> 的 <a href="http://github.com/metal/metal-state/blob/c87ac15b8a9fa3ee64c421f22411f97cd376024a/src/State.js#L61">文档</a>。
		</p>

		{call .acessingAndUpdating /}

		<h2 id="config">配置数据</h2>

		<p>
			任何传递给构造函数，但是并未作为状态属性被配置的数据仍然能够通过 <code>config</code> 被访问。
			改变这些属性将不能被追踪，因此通常适用于您的组件的选项，这些选项只能从外部设置。
		</p>

		<textarea class="code" data-mode="javascript">
{literal}var obj = new Calculator({
  number: 10,
  foo: 'foo'
});
console.log(obj.number); // Prints 2
console.log(obj.foo); // Prints undefined
console.log(obj.config.foo); // Prints 'foo'{/literal}
		</textarea>

	{/param}
{/call}
{/template}

/**
 * Content added after a State example.
 */
{template .acessingAndUpdating}
	<h2>访问并更新状态</h2>

	<p>
		构造函数能够接受带初始值的配置对象为它的状态属性所用。
		您能访问或者改变一个对象的状态，用和您访问或改变任何对象属性相同的方式。
		或者，您也能调用 <code>setState</code> 方法来通过给定的对象更新指定的属性。
	</p>

	<textarea class="code" data-mode="javascript">
{literal}var obj = new Calculator();
console.log(obj.number); // Prints 0

obj.number = '1';
console.log(obj.number); // Prints 1

obj.setState({number: 2});
console.log(obj.number); // Prints 2{/literal}
	</textarea>

	<p>您也能通过监听适当的事件来追踪状态值的改变。</p>

	<textarea class="code" data-mode="javascript">
{literal}obj.on('numberChanged', function(event) &lbrace;
// event.prevVal has the previous value.
// event.newVal has the new value.
&rbrace;);{/literal}
	</textarea>

	<p>想看看 <strong>State</strong> 类的所有特性，请看看它的 <a href="https://github.com/metal/metal-state/blob/master/test/State.js">单元测试</a>。</p>
{/template}
