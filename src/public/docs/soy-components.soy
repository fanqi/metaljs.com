{namespace docsSoyComponents}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>Soy 组件</h1>

		<p>
			先了解关于怎样使用 soy 模板构建组件的整个教程，请确保学过了 <a href="/docs/modal.html">模态框教程</a>。
		</p>

		<p>
			本指南将说明 <strong>Metal.js</strong> 组件和 <a href="http://developers.google.com/closure/templates/">soy 模板</a> 之间集成的有关细节。
		</p>

		<p>
			注意，<strong>Metal.js</strong> 与模板无关，因此它根本没必要使用 soy。也就是说，我们已经提供了 metal 组件和 soy 之间很好的集成，因此如果您喜欢这个模板语言的话可以试一试。
		</p>

		<h2>Soy.register</h2>

		<p>
			在您的 <strong>Metal.js</strong> 组件中使用 soy 模板，您只需要做的是调用 <code>Soy.register</code>，传给它您的组件类和您将使用的 soy 模板，像这样：
		</p>

		<textarea class="code" data-mode="javascript">
{literal}import templates from './MyComponent.soy';
import Component from 'metal-component';
import Soy from 'metal-soy';

class MyComponent extends Component {
}
Soy.register(MyComponent, templates);

export default MyComponent;{/literal}
		</textarea>

		<p>
			默认情况下，<strong>Metal.js</strong> 为了渲染将用被叫做 <strong>render</strong> 的 soy 模板作为入口。但是如果你愿意，也可以传一个名称给 <code>Soy.register</code> 方法最后的参数，告诉我们使用了一个不同的方式，像这样：
		</p>

		<textarea class="code" data-mode="javascript">
{literal}Soy.register(MyComponent, templates, 'templateName');{/literal}
		</textarea>

		<h2>模板文件</h2>

		<p>
			确保您的 soy 文件有这个入口点模板（默认是<strong>render</strong> ），否则没什么会被渲染。
		</p>

		<p>
			这个主模板将接收以下数据组合：
			<ul>
				<li><a href="/docs/state.html">状态数据</a></li>
				<li><a href="/docs/state.html#config">配置数据</a> （通过 <code>this.config</code> 访问）</li>
				<li><a href="/docs/inline-events.html#function">组件方法</a></li>
			</ul>
		</p>

		<p>
			注意，默认情况下所有在组件主 soy 模板中被定义的参数都会自动被配置成状态属性，但是没有特定配置项（例如初始值或验证器）。如通过状态属性手动配置，它们仍然会保持指定的安装。
		</p>

		<p>
			组件传递过来而没有被直接定义在主要的 soy 模板中的任何参数都将作为基本配置数据被处理，这意味着改变它们将不能自动重新渲染组件。它们仍然能够被传递给其他模板通过使用 <code>data="all"</code> ，同样地在 js 文件中也能通过 <code>config</code> 属性被访问到。
		</p>

		<textarea class="code" data-mode="javascript">
{literal}// Contains all the data received by the component.
this.config{/literal}
		</textarea>

		<h2>Soy 编译</h2>

		<p>
			为了使 <strong>Metal.js</strong> 和 <strong>soy</strong> 集成工作，soy 文件需要被我们的构建工具编译。这是因为它们不仅编译代码，也会添加一些信息帮助集成（例如导入声明）。
		</p>

		<p>
			为 <strong>Metal.js</strong> 提供的能够正确编译 soy 的可用构建工具是：
		</p>

		<ul>
			<li>
				<p>
					<a href="http://npmjs.com/package/gulp-metal">gulp-metal</a> （当通过 <a href="/docs/yeoman-generator.html">generator-metal</a> 创建项目时已经包括在内了）。
				</p>
			</li>
			<li>
				<p>
					<a href="http://npmjs.com/package/metal-cli">metal-cli</a>
				</p>
			</li>
			<li>
				<p>
					<a href="http://npmjs.com/package/metal-tools-soy">metal-tools-soy</a>
				</p>
			</li>
		</ul>
	{/param}
{/call}
{/template}
