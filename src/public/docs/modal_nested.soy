{namespace docsModalNested}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>教程：模态框 - 嵌套组件</h1>

		<p>
			在 <a href="/docs/modal_updates.html">上一章</a>中，我们已经处理完了组件的行为。
		</p>

		<p>
			但是如果 <strong>模态框</strong> 头部的标记和在其他地方使用的非常相似呢？
			理想情况下，我们可以将它移动到单独的组件以便于重用。这就是我们将在这章做的。
		</p>

		<h2>创建 <strong>CloseHeader</strong></h2>

		<p>
			首先让我们来创建新的组件。添加一个 <strong>src/CloseHeader.js</strong> 文件到项目中：
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/CloseHeader.js', 'JSX: src/CloseHeader.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="javascript">{literal}import templates from './CloseHeader.soy';
import Component from 'metal-component';
import Soy from 'metal-soy';

class CloseHeader extends Component {
}
Soy.register(CloseHeader, templates);

export default CloseHeader;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">{literal}import JSXComponent from 'metal-jsx';

class CloseHeader extends JSXComponent {
	render() &lbrace;
	}
}

export default CloseHeader;{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			现在我们准备一个类似于所使用的 <strong>Modal</strong> 的模板：
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/CloseHeader.soy', 'JSX: src/CloseHeader.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}&lbrace;namespace CloseHeader&rbrace;

/**
 * @param cssClass
 * @param onClick
 * @param title
 */
&lbrace;template .render&rbrace;
	&lt;header class="{$cssClass}"&gt;
		&lt;button onClick="{$onClick}" type="button" class="close"&gt;
			&lt;span&gt;×&lt;/span&gt;
		&lt;/button&gt;
		&lt;h4&gt;{$title}&lt;/h4&gt;
	&lt;/header&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}render() {
	return &lt;header class={this.config.cssClass}&gt;
		&lt;button onClick={this.config.onClick} type="button" class="close"&gt;
			&lt;span&gt;×&lt;/span&gt;
		&lt;/button&gt;
		&lt;h4&gt;{this.config.title}&lt;/h4&gt;
	&lt;/header&gt;;
}{/literal}
				</textarea>
			{/param}
		{/call}

		<p>搞定！我们的新组件已经准备好被 <strong>模态框</strong> 使用了。</p>

		<h2>使用 <strong>CloseHeader</strong></h2>

		<p>
			我们所需要做的就是通过调用 <strong>CloseHeader</strong> 替换模态框模板的头部标记：
		</p>

		{call codeTabs.main}
			{param tabs: ['Soy: src/Modal.soy', 'JSX: src/Modal.js'] /}
			{param content kind="html"}
				<textarea class="code" data-mode="x-soy">
{literal}/**
 * @param body
 * @param close
 * @param header
 * @param shown
 */
&lbrace;template .render&rbrace;
	&lt;div class="modal {$shown ? 'show': ''}"&gt;
		&lt;div class="modal-dialog"&gt;
			&lt;div class="modal-content"&gt;
				&lbrace;call CloseHeader.render&rbrace;
					&lbrace;param cssClass: 'modal-header' /&rbrace;
					&lbrace;param onClick: $close /&rbrace;
					&lbrace;param title: $header /&rbrace;
				&lbrace;/call&rbrace;
				&lt;section class="modal-body"&gt;
					{$body}
				&lt;/section&gt;
				&lt;footer class="modal-footer"&gt;
					&lt;button type="button" class="btn btn-primary"&gt;OK&lt;/button&gt;
				&lt;/footer&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lbrace;/template&rbrace;{/literal}
				</textarea>
				<textarea class="code hidden" data-mode="javascript">
{literal}render() {
	var cssClass = 'modal';
	if (this.shown) {
		cssClass += 'show';
	}
	return &lt;div class={cssClass}&gt;
		&lt;div class="modal-dialog"&gt;
			&lt;div class="modal-content"&gt;
				&lt;CloseHeader
					cssClass="modal-header"
					onClick={this.close.bind(this)}
					title={this.header}
				/&gt;
				&lt;section class="modal-body"&gt;
					{this.body}
				&lt;/section&gt;
				&lt;footer class="modal-footer"&gt;
					&lt;button type="button" class="btn btn-primary"&gt;OK&lt;/button&gt;
				&lt;/footer&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;;
}{/literal}
				</textarea>
			{/param}
		{/call}

		<p>
			这不仅仅会在正确的位置呈现 <strong>CloseHeader</strong>，也会实例化。
			关于嵌套组件的更多细节，请查看 <a href="/docs/nested-components.html">关于它的指南</a>。
		</p>

		<h2>接下来的步骤</h2>

		<p>
			现在我们已经学习了怎样正确地创建一个新的组件，还需要知道怎样测试它。下一章将重点关注这个。
		</p>

		<p><strong><a href="/docs/modal_testing.html">↪ 教程：模态框 - 测试</a></strong></p>
	{/param}
{/call}
{/template}
