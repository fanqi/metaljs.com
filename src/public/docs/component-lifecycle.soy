{namespace docsComponentLifecycle}

/**
 * This template will be rendered by SoyWeb when the user loads static.soy.
 * It deliberately includes dummy data so the designer can get a feel for how
 * the task list will appear with real data rather with minimal copy and paste.
 */
{template .soyweb}
{call docs.layout}
	{param content kind="html"}
		<h1>组件生命周期</h1>

		<p>由 Metal.js 构建的组件提供了生命周期方法，当我们需要时能够进行调用。下面的例子列出了所有可用的生命周期方法，按照它们被调用的顺序：</p>

		<textarea class="code" data-mode="javascript">{literal}
class MyComponent extends Component {
	/**
	 * 在首次创建组件时调用，
	 * 但在首次渲染之前。
	 */
	created() {
	}

	/**
	 * 每当组件被渲染时调用。
	 */
	rendered() {
	}

	/**
	 * 当组件被附加到DOM时调用。
	 * 当第一次渲染时，组件将自动被附加，但是直接调用`attach`方法也能被附加（没有重新渲染组件）。
	 * 一旦组件在页面中可用了，这里就是分离事件监听器的好地方。
	 */
	attached() {
	}

	/**
	 * 当组件与DOM分离时调用。
	 * 组件在被处理释放时将自动被分离，但是直接调用`detach`方法也能被分离（没有释放组件）。
	 * 一旦组件在页面中可用了，这里就是附加事件监听器的好地方。
	 */
	detached() {
	}

	/**
	 * 当组件被处理释放时调用。
	 * 这里应该包含任何必要的清理，如分离任何剩余的事件和处置子组件和局部变量。
	 */
	disposed() {
	}
}
{/literal}</textarea>
	{/param}
{/call}
{/template}
