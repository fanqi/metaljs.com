{namespace index}

/**
 * Tagline
 */
{template .tagline}
	<section class="tagline">
		<div class="row">
  		<div class="col-md-8 col-md-offset-2">
  			<h2 class="tagline-title">以可靠、灵活的方式构建 UI 组件。</h2>
				<a class="btn btn-size-medium btn-effect-primary btn-tagline-primary" href="https://github.com/metal/metal/archive/master.zip" data-text="下载 Metal"><span>下载 Metal</span></a>
				<a class="btn btn-size-medium btn-effect-primary btn-tagline-secondary" href="/docs" data-text="了解更多"><span>了解更多</span></a>
  		</div>
		</div>
	</section>
{/template}

/**
 * Features
 */
{template .features}
	<section class="features">
		<div class="container">
			<div class="row">
				<div class="col-sm-4 col-xs-12">
					<section class="feature">
						<img class="feature-image" src="/images/speedometer_icon.svg" alt="Speedometer icon" width="48">
						<h3 class="feature-title">性能优先</h3>
						<p class="feature-description">用心基于性能构建, 我们不断用最流行的类库进行测试。<br><br></p>
						<a class="feature-link" href="/docs/performance.html">了解更多</a>
					</section>
				</div>
				<div class="col-sm-4 col-xs-12">
					<section class="feature">
						<img class="feature-image" src="/images/module_icon.svg" alt="Module icon" width="48">
						<h3 class="feature-title">多种构建</h3>
						<p class="feature-description">专注于什么是重要的。我们提供工具以全局对象、AMD 和 jQuery 插件的方式构建代码。</p>
						<a class="feature-link" href="/docs/building.html">了解更多</a>
					</section>
				</div>
				<div class="col-sm-4 col-xs-12">
					<section class="feature">
						<img class="feature-image" src="/images/circle_arrow_icon.svg" alt="Circle arrow icon" width="48">
						<h3 class="feature-title">未来准备</h3>
						<p class="feature-description">通过使用 ES6，受益于最好的 JavaScript，同时保持了易于阅读和整洁的代码。</p>
						<a class="feature-link" href="/docs">了解更多</a>
					</section>
				</div>
			</div>
		</div>
	</section>
{/template}

/**
 * Architecture
 */
{template .architecture}
	<section class="architecture">
		<div class="container">
			<div class="row">
				<div class="col-lg-5 col-lg-offset-1 col-sm-5 col-xs-12">
					<h3 class="architecture-title">我们的架构</h3>
					<p class="architecture-description">
						Metal.js 的主类是 State 和 Component 。
						实际上 Component 继承自 State，因此包含了它所有的特性。
						两者之间最主要的区别是 Component 的扩展特性是与渲染相关的。
						因此如果模块不需要做任何渲染，则可以直接使用 State。
						但是如果模块需要渲染逻辑，那么 Component 将更适合。
					</p>
					<p class="architecture-description">
						许多人都有自己最喜欢的处理渲染逻辑的方式。
						有些人更喜欢使用与业务逻辑完全分离的模板语言，而另一些人则喜欢在相同的文件把两者写在一起。
						Metal.js 不强制开发者选择其中的一种方式。
						默认情况下，它提供了与 Google 的 closure 模板和 Facebook 的 JSX 的集成机制，
						而且可以添加更多的选择，因为渲染层是可定制化的。
				</div>
				<div class="architecture-image col-lg-6 col-sm-7 col-xs-12">
					<img class="architecture-image-primary" src="images/metal_architecture@2x.png" alt="Architecture" width="460" height="456">
					<img class="architecture-image-secondary" src="images/shadow_metal_architecture@2x.png" alt="Shadow" width="218" height="52">
				</div>
			</div>
		</div>
	</section>
{/template}

/**
 * Collections
 */
{template .collections}
	<section class="collections">
		<div class="container">
			<div class="collection-headline">
				<p>Built with <strong>Metal</strong></p>
				<p><img src="images/arrow_down.svg" alt="Arrow Down" width="19"></p>
			</div>
		</div>
		<div class="container-fluid">
			<div class="row">
				<div class="collection collection-secondary col-md-6 col-xs-12">
					<a class="btn btn-size-large btn-effect-secondary btn-collection-secondary" data-text="Crystal UI">
						<span>C</span><span>o</span><span>m</span><span>i</span><span>n</span><span>g</span><span>&nbsp;</span>
						<span>s</span><span>o</span><span>o</span><span>n</span>
					</a>
				</div>
				<div class="collection collection-primary col-md-6 col-xs-12">
					<a class="btn btn-size-large btn-effect-secondary btn-collection-primary" data-text="Steel UI">
						<span>C</span><span>o</span><span>m</span><span>i</span><span>n</span><span>g</span><span>&nbsp;</span>
						<span>s</span><span>o</span><span>o</span><span>n</span>
					</a>
				</div>
			</div>
		</div>
	</section>
{/template}

/**
 * Call to action
 */
{template .calltoaction}
	<section class="calltoaction">
		<div class="container">
			<h4 class="calltoaction-title">现在开始构建吧。你准备好了吗？</h4>
			<a class="btn btn-size-medium btn-effect-primary btn-calltoaction" href="https://github.com/metal/metal/archive/master.zip" data-text="下载 Metal"><span>下载 Metal</span></a>
		</div>
	</section>
{/template}
